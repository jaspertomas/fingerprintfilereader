/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fingerprint.windows;

import java.io.File;
import java.sql.Time;
import java.util.ArrayList;
import java.util.TreeMap;
import javax.swing.JFileChooser;
import models.Calendar;
import models.DailyEmployeeData;
import models.TimeRecord;
import models.DailyEmployeesData;
import models.EmployeeNameList;
import models.WeeklyEmployeesData;
import utils.fileaccess.FileReader;

/**
 *
 * @author jaspertomas
 */
public class MainFrame extends java.awt.Frame {

    /**
     * Creates new form MainFrame
     */
       public final Time twelve=new Time(12,0,0);
       public final Time one=new Time(13,0,0);
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooseFile = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        chooseFile.setText("Choose CSV data file");
        chooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileActionPerformed(evt);
            }
        });
        add(chooseFile, java.awt.BorderLayout.CENTER);

        jTextArea.setColumns(60);
        jTextArea.setRows(20);
        jScrollPane2.setViewportView(jTextArea);

        add(jScrollPane2, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    ArrayList<TimeRecord> records;
    private void chooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileActionPerformed
        // TODO add your handling code here:
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        
        //In response to a button click:
        int returnVal = fc.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //parse file
            File file = fc.getSelectedFile();

            //parse file and create records list
            parseFile(file);
            
            //create employee name list
            // and date list
            EmployeeNameList namelist=new EmployeeNameList();
            Calendar datelist=new Calendar();
            for(TimeRecord record:records)
            {
                if(!namelist.contains(record.getName()))
                    namelist.add(record.getName());
                if(!datelist.contains(record.getDate()))
                    datelist.add(record.getDate());
            }
            
            //process data into array structure
            WeeklyEmployeesData wed=new WeeklyEmployeesData();
            //arrange records into employees, 
            //get earliest and latest record per employee
            //set these as in and out respectively
            //datesmap is a map with date as key and array of records as value
            //each array of records contains records of the same date
            for(ArrayList<TimeRecord> recordlist :datesmap.values())
            {
                //do this for each set of records of the same date
                
                //this map has the employee name as key 
                // and packaged in and out records as data
                //it is recreated for each date
                DailyEmployeesData edatamap=genEmployeeDataMap(recordlist);
//                if(recordlist.size()>0)
                wed.put(recordlist.get(0).getDate(), edatamap);
            }
            
            //sample output
            for(String name:namelist)
            {
                for(String date:datelist)
                {
                    DailyEmployeeData data=wed.get(date).get(name);
                    if(data==null)continue;
                    
                    jTextArea.append(name+"\t");
                    jTextArea.append(date+"\t");
                    if(data.getIn().getTime().equals(one))
                    {
                    jTextArea.append(
                            ""
                            +"\t"
                            +""
                            +"\t"
                            +data.getInTimeString()
                            +"\t"
                            +data.getOutTimeString()
                            +"\n"
                            );
                    }
                    else
                    if(data.getOut().getTime().equals(twelve))
                    {
                    jTextArea.append(
                            data.getInTimeString()
                            +"\t"
                            +data.getOutTimeString()
                            +""
                            +"\t"
                            +""
                            +"\t"
                            +"\n"
                            );
                    }
                      else
                    {
                    jTextArea.append(
                            data.getInTimeString()
                            +"\t"
                            +"1200"
                            +"\t"
                            +"1300"
                            +"\t"
                            +data.getOutTimeString()
                            +"\n"
                            );
                    }
                    
                }
            }
            
        } 
    }//GEN-LAST:event_chooseFileActionPerformed

    
    TreeMap<String,ArrayList<TimeRecord>> datesmap;
    private void parseFile(File file)
    {
        //extract file contents
        String filecontents=FileReader.read(file.getPath());

        //remove double spaces and null characters
        filecontents=filecontents.replace("\0", "");
        filecontents=filecontents.replace("\n\n", "\n");
        
        //split into lines
        String[] lines=filecontents.split("\n");

        //convert lines into objects
        records= new ArrayList<TimeRecord>();
        for(String line:lines)
        {
            if(line.trim().length()!=0 && !line.contains("APB\tJobCode\tDateTime"))
                records.add(new TimeRecord(line));
        }
        
        //group by date
        ArrayList<TimeRecord> dailyrecordlist; 
        datesmap=new TreeMap<String,ArrayList<TimeRecord>>();
        for(TimeRecord record:records)
        {
            if(!datesmap.containsKey(record.getDate()))
            {
                dailyrecordlist=new ArrayList<TimeRecord>();
                dailyrecordlist.add(record);
                datesmap.put(record.getDate(), dailyrecordlist);
            }
            else
            {
                dailyrecordlist=datesmap.get(record.getDate());
                dailyrecordlist.add(record);
//                    datesmap.put(record.getDate(), dailyrecords);
            }

        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseFile;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea;
    // End of variables declaration//GEN-END:variables

    private DailyEmployeesData genEmployeeDataMap(ArrayList<TimeRecord> recordlist)
    {
        String date;
        DailyEmployeesData employeedatamap=new DailyEmployeesData();
        date=recordlist.get(0).getDate();
//                System.out.println(date);

        //process all records, sort by employee
        DailyEmployeeData edata;
        for(TimeRecord tr:recordlist)
        {
            if(!employeedatamap.containsKey(tr.getName()))
            {
                edata=new DailyEmployeeData();
                employeedatamap.put(tr.getName(), edata);
                edata.setIn(tr);
                edata.setOut(tr);
            }
            else
            {
                edata=employeedatamap.get(tr.getName());
                if(edata.getIn().islaterthan(tr))
                {
                    edata.setIn(tr);
                }
                else if(edata.getOut().isearlierthan(tr))
                {
                    edata.setOut(tr);
                }
            }
        }
//        System.out.println(date);
        Time time;
        for(DailyEmployeeData edata2:employeedatamap.values())
        {
            //adjust in time to 1:00 if between 12 and 1
            time=edata2.getIn().getTime();
            if
            (
                time.after(twelve)
                &&
                time.before(one)
            )
            {
                edata2.getIn().setTime(one);
            }
            //adjust out time to 12:00 if between 12 and 1
            time=edata2.getOut().getTime();
            if
            (
                time.after(twelve)
                &&
                time.before(one)
            )
            {
                edata2.getOut().setTime(twelve);
            }


//            System.out.print(edata2.getIn().getName());
//            System.out.print("-");
//            System.out.print(edata2.getIn().getTime());
//            System.out.print("-");
//            System.out.print(edata2.getOut().getTime());
//            if(edata2.getIn().getTime().compareTo(edata2.getOut().getTime())==0)
//                System.out.print(" only 1 record");
//            System.out.println();
        }  
//        System.out.println("----------");

        return employeedatamap;
    }


}
