/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fingerprint.windows;

import java.io.File;
import java.sql.Time;
import java.util.ArrayList;
import java.util.TreeMap;
import javax.swing.JFileChooser;
import models.DailyEmployeeData;
import models.TimeRecord;
import utils.fileaccess.FileReader;

/**
 *
 * @author jaspertomas
 */
public class MainFrame extends java.awt.Frame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooseFile = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        chooseFile.setText("Choose CSV data file");
        chooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileActionPerformed(evt);
            }
        });
        add(chooseFile, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    ArrayList<TimeRecord> records;
    private void chooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileActionPerformed
        // TODO add your handling code here:
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        
        //In response to a button click:
        int returnVal = fc.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //parse file
            File file = fc.getSelectedFile();

            parseFile(file);
            
            //arrange records into employees, 
            //get earliest and latest record per employee
            //set these as in and out respectively
            for(ArrayList<TimeRecord> recordlist :datesmap.values())
            {
                TreeMap <String,DailyEmployeeData> edatamap=genEmployeeDataMap(recordlist);
            }

            
            
//            byte[] chars=lines[0].getBytes();
//            for(int i=0;i<chars.length;i++)
//                System.out.println(Integer.valueOf(chars[i]));
//            System.out.println();
//
//            chars=lines[1].getBytes();
//            for(int i=0;i<chars.length;i++)
//                System.out.println(Integer.valueOf(chars[i]));
//            System.out.println();
//            
//            chars=lines[2].getBytes();
//            for(int i=0;i<chars.length;i++)
//                System.out.println(Integer.valueOf(chars[i]));
//            System.out.println();
            
            //This is where a real application would open the file.
//            log.append("Opening: " + file.getName() + "." + newline);
        } else {
//            log.append("Open command cancelled by user." + newline);
        }
    }//GEN-LAST:event_chooseFileActionPerformed

    
    TreeMap<String,ArrayList<TimeRecord>> datesmap;
    private void parseFile(File file)
    {
        //extract file contents
        String filecontents=FileReader.read(file.getPath());

        //remove double spaces and null characters
        filecontents=filecontents.replace("\0", "");
        filecontents=filecontents.replace("\n\n", "\n");
        
        //split into lines
        String[] lines=filecontents.split("\n");

        //convert lines into objects
        records= new ArrayList<TimeRecord>();
        for(String line:lines)
        {
            if(!line.contains("APB\tJobCode\tDateTime"))
                records.add(new TimeRecord(line));
        }
        
        //group by date
        ArrayList<TimeRecord> dailyrecordlist; 
        datesmap=new TreeMap<String,ArrayList<TimeRecord>>();
        for(TimeRecord record:records)
        {
            if(!datesmap.containsKey(record.getDate()))
            {
                dailyrecordlist=new ArrayList<TimeRecord>();
                dailyrecordlist.add(record);
                datesmap.put(record.getDate(), dailyrecordlist);
            }
            else
            {
                dailyrecordlist=datesmap.get(record.getDate());
                dailyrecordlist.add(record);
//                    datesmap.put(record.getDate(), dailyrecords);
            }

        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseFile;
    // End of variables declaration//GEN-END:variables

    private TreeMap <String,DailyEmployeeData> genEmployeeDataMap(ArrayList<TimeRecord> recordlist)
    {
                String date;
                TreeMap <String,DailyEmployeeData> employeedatamap;//=new TreeMap <String,DailyEmployeeData>();
                employeedatamap=new TreeMap <String,DailyEmployeeData>();
                date=recordlist.get(0).getDate();
//                System.out.println(date);
                
                //process all records, sort by employee
                DailyEmployeeData edata;
                for(TimeRecord tr:recordlist)
                {
                    if(!employeedatamap.containsKey(tr.getName()))
                    {
                        edata=new DailyEmployeeData();
                        employeedatamap.put(tr.getName(), edata);
                        edata.setIn(tr);
                        edata.setOut(tr);
                    }
                    else
                    {
                        edata=employeedatamap.get(tr.getName());
                        if(edata.getIn().islaterthan(tr))
                        {
                            edata.setIn(tr);
                        }
                        else if(edata.getOut().isearlierthan(tr))
                        {
                            edata.setOut(tr);
                        }
                    }
                }
                System.out.println(date);
                Time time;
                Time twelve=new Time(12,0,0);
                Time one=new Time(13,0,0);
                for(DailyEmployeeData edata2:employeedatamap.values())
                {
                    //adjust in time to 1:00 if between 12 and 1
                    time=edata2.getIn().getTime();
                    if
                    (
                        time.after(twelve)
                        &&
                        time.before(one)
                    )
                    {
                        edata2.getIn().setTime(one);
                    }
                    //adjust out time to 12:00 if between 12 and 1
                    time=edata2.getOut().getTime();
                    if
                    (
                        time.after(twelve)
                        &&
                        time.before(one)
                    )
                    {
                        edata2.getOut().setTime(twelve);
                    }
                    
                    
                    System.out.print(edata2.getIn().getName());
                    System.out.print("-");
                    System.out.print(edata2.getIn().getTime());
                    System.out.print("-");
                    System.out.print(edata2.getOut().getTime());
                    if(edata2.getIn().getTime().compareTo(edata2.getOut().getTime())==0)
                        System.out.print(" only 1 record");
                    System.out.println();
                }  
                System.out.println("----------");
                
                return employeedatamap;
    }


}
